// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String         @id @default(cuid())
    name                   String?
    email                  String?        @unique
    emailVerified          DateTime?
    image                  String?
    accounts               Account[]
    sessions               Session[]
    SplitGroup             SplitGroup[]
    UsersOnGroup           UsersOnGroup[]
    PaidTransactions       Transactions[] @relation("Paying User")
    CreatedTransactions    Transactions[] @relation("Transaction Creator")
    TransactionShareholder Transactions[] @relation("Included in Payment")
    PayerSettlement        Settlements[]  @relation("Payer")
    PayeeSettlement        Settlements[]  @relation("Payee")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SplitGroup {
    id            String         @id @default(cuid())
    name          String?
    creator       User           @relation(fields: [creatorId], references: [id])
    creatorId     String
    UsersOnGroup  UsersOnGroup[]
    totalExpenses Int            @default(0)

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Settlements  Settlements[]
    Transactions Transactions[]
}

model UsersOnGroup {
    user         User       @relation(fields: [userId], references: [id])
    userId       String
    splitGroup   SplitGroup @relation(fields: [splitGroupId], references: [id])
    splitGroupId String

    @@id([userId, splitGroupId])
}

model Transactions {
    id           String  @id @default(cuid())
    name         String
    amount       Int
    splitEqually Boolean @default(true)
    payingUser   User    @relation("Paying User", fields: [payingUserId], references: [id])
    payingUserId String
    creator      User    @relation("Transaction Creator", fields: [creatorId], references: [id])
    creatorId    String
    splitAmong   User[]  @relation("Included in Payment")

    group        SplitGroup @relation(fields: [splitGroupId], references: [id])
    splitGroupId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Settlements {
    id             String @id @default(cuid())
    amount         Int
    paidFrom       User   @relation("Payer", fields: [paidFromId], references: [id])
    paidFromId     String
    recievedBy     User   @relation("Payee", fields: [recievedFromId], references: [id])
    recievedFromId String

    group        SplitGroup @relation(fields: [splitGroupId], references: [id])
    splitGroupId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
